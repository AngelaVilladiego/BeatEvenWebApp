@model IEnumerable<Interval>
@{
    ViewData["Title"] = "Test Timer";
    ViewData["Username"] = ViewBag.Username;
    var list = Model;
}

<link rel="stylesheet" href="~/css/timer.css" />


<button onclick="startWorkout()">Start the workout!</button>

<br />
<span id="intInfo"></span>
<h2 id="type">@ViewBag.WorkoutName</h2>

<div id="time"></div>
<div class="base-timer">
    <svg class="base-timer__svg" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
        <g class="base-timer__circle">
            <circle class="base-timer__path-elapsed" cx="50" cy="50" r="45" />
            <path
                id="base-timer-path-remaining"
                stroke-dasharray="283"
                class="base-timer__path-remaining"
                d="
                  M 50, 50
                  m -45, 0
                  a 45,45 0 1,0 90,0
                  a 45,45 0 1,- -90,0
                "
            ></path>
            </g>
    </svg>
    <span id="base-timer-label" class="base-timer__label"></span>
</div>

<audio id="highBeep">
    <source src="~/Assets/highBeep.wav" type="audio/wav">
</audio>
<audio id="lowBeep">
    <source src="~/Assets/lowBeep.wav" type="audio/wav">
</audio>
<audio id="swoosh">
    <source src="~/Assets/swoosh.ogg" type="audio/ogg">
</audio>

<!--Timer functionality script-->
<script>
    //get the list of intervals
    var intervals = @Html.Raw(Json.Serialize(list.Select(
                        interval => new
                        {
                            rpe = interval.RPE,
                            desc = interval.Desc,
                            secs = interval.Secs
                        })
                        ));

    //keep track of index of the current interval
    var intIndex = 0;

    //display variables
    var display = document.querySelector('#base-timer-label');
    var intInfo = document.querySelector('#intInfo');

    //audio variables
    var highBeep = document.querySelector('#highBeep');
    var lowBeep = document.querySelector('#lowBeep');
    var swoosh = document.querySelector('#swoosh');

    //variables to track time left, time limit, and time passed
    var timeLimit = intervals[0].secs;
    var timePassed = 0;
    var timeLeft = timeLimit;

    //starts and handles the timer and display for one interval of the workout
    function startTimer(duration) {
        var start = Date.now(),
            diff,
            minutes,
            seconds;

        var timesRun = 0;

        function timer() {
            // get the number of seconds that have elapsed since
            // startTimer() was called
            diff = duration - (((Date.now() - start) / 1000) | 0);

            // does the same job as parseInt truncates the float
            minutes = (diff / 60) | 0;
            seconds = (diff % 60) | 0;

            if (diff <= 3 && diff > 0) {
                lowBeep.play();
            }

            minutes = minutes < 10 ? "0" + minutes : minutes;
            seconds = seconds < 10 ? "0" + seconds : seconds;

            display.textContent = minutes + ":" + seconds;

            timePassed++;
            timeLeft = timeLimit - timePassed;

        };
        // we don't want to wait a full second before the timer starts
        timer();
        var interval = setInterval(function() {
                timesRun += 1;
                if (timesRun === duration) {
                    clearInterval(interval);

                    //add 1 to the index and call start interval again
                    intIndex ++;
                    startInterval(intIndex);
                }
                timer();
            },
            1000);
    };

    //gets called by button and then at the end of each interval to start the next interval (if there is one)
    function startInterval(index) {

        if (index >= intervals.length) {
            endWorkout();
            return;
        }

        var currInterval = intervals[index];

        //reset the counting variables
        timeLimit = currInterval.secs;
        timeLeft = timeLimit;
        timePassed = 0;

        intInfo.textContent = `${currInterval.rpe} - ${currInterval.desc}`;

        swoosh.play();
        startTimer(currInterval.secs);

    };

    //directed here after timer end to pass the index of
    function endWorkout() {
        intIndex = 0;
        test.textContent = "Workout Completed!";

        var count = 0;
        //play end beep three times
        var interval = setInterval(function () {
                count ++;
                if (count === 3) {
                    clearInterval(interval);
                }
                highBeep.play();
            },
            200);


    }

    //start the workout with a 3-second get ready timer
    function startWorkout() {
        //play countdown beeps
        var count = 0;
        var interval = setInterval(function () {
                count ++;
                if (count === 4) {
                    clearInterval(interval);
                    startInterval(0);
                }
                if (count < 4)
                    lowBeep.play();
            },
            1000);

        test.textContent = "Get Ready!";
    }

</script>
